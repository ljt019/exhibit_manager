name: Release Application

on:
  push:
    branches:
      - main # Adjust if your default branch is different

permissions:
  contents: write

jobs:
  release_application:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Extract Application Version and Product Name
      - name: Get Application Version and Product Name
        id: app_info
        shell: pwsh
        run: |
          $appConf = "application/src-tauri/tauri.conf.json"
          if (-Not (Test-Path $appConf)) {
            Write-Error "tauri.conf.json not found at $appConf"
            exit 1
          }
          $json = Get-Content $appConf | ConvertFrom-Json
          $productName = $json.package.productName
          $version = $json.package.version
          Write-Output "product_name=$productName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Step 3: Check if Application Release Exists
      - name: Check if Application Release Exists
        id: check_release_app
        uses: actions/github-script@v6
        with:
          script: |
            const tag = `app-v${process.env.APP_VERSION}`;
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const exists = releases.data.some(release => release.tag_name === tag);
            return exists;
        env:
          APP_VERSION: ${{ steps.app_info.outputs.version }}

      # Step 4: Set Output if Release Exists
      - name: Set Output if Release Exists
        id: set_release_exists
        run: echo "release_exists=${{ steps.check_release_app.outputs.result }}" >> $GITHUB_OUTPUT

      # Step 5: Set up Rust environment
      - name: Set up Rust
        if: steps.set_release_exists.outputs.release_exists == 'false'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          cache: cargo

      # Step 6: Cache npm dependencies
      - name: Cache npm dependencies
        if: steps.set_release_exists.outputs.release_exists == 'false'
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            !~/.npm/_logs
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      # Step 7: Set up Node.js
      - name: Set up Node.js
        if: steps.set_release_exists.outputs.release_exists == 'false'
        uses: actions/setup-node@v3
        with:
          node-version: "16" # Specify your Node.js version
          cache: "npm"

      # Step 8: Install Project Dependencies
      - name: Install dependencies
        if: steps.set_release_exists.outputs.release_exists == 'false'
        run: |
          cd application
          npm install
          cd ..

      # Step 9: Build the Tauri Application
      - name: Build Tauri Application
        if: steps.set_release_exists.outputs.release_exists == 'false'
        shell: pwsh
        run: |
          cd application
          npm run tauri:build
          cd ..

      # Step 10: Create Release for Application
      - name: Create Release for Application
        if: steps.set_release_exists.outputs.release_exists == 'false'
        id: create_release_app
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ steps.app_info.outputs.version }}
          release_name: ${{ steps.app_info.outputs.product_name }} v${{ steps.app_info.outputs.version }}
          body: "Release ${{ steps.app_info.outputs.product_name }} v${{ steps.app_info.outputs.version }}"
          draft: false
          prerelease: false

      # Step 11: Upload Release Asset for Application
      - name: Upload Release Asset for Application
        if: steps.set_release_exists.outputs.release_exists == 'false'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_app.outputs.upload_url }}
          asset_path: ./application/src-tauri/target/release/bundle/nsis/exhibit_manager_${{ steps.app_info.outputs.version }}_x64-setup.exe
          asset_name: exhibit_manager_${{ steps.app_info.outputs.version }}_x64-setup.exe
          asset_content_type: application/octet-stream
