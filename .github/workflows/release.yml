name: Build and Release

on:
  push:
    branches:
      - main # Change to your default branch if different

jobs:
  release:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Rust environment
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rust-version: stable

      # Step 3: Extract Application Version and Product Name
      - name: Get Application Version and Product Name
        id: app_info
        shell: pwsh
        run: |
          $appConf = "application/src-tauri/tauri.conf.json"
          if (-Not (Test-Path $appConf)) {
            Write-Error "tauri.conf.json not found at $appConf"
            exit 1
          }
          $json = Get-Content $appConf | ConvertFrom-Json
          $productName = $json.package.productName
          $version = $json.package.version
          Write-Output "product_name=$productName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Step 4: Extract Backend Version and Name
      - name: Get Backend Version and Name
        id: backend_info
        shell: pwsh
        run: |
          $backendToml = "backend/Cargo.toml"
          if (-Not (Test-Path $backendToml)) {
            Write-Error "Cargo.toml not found at $backendToml"
            exit 1
          }
          $tomlContent = Get-Content $backendToml -Raw
          # Extract name
          if ($tomlContent -match 'name\s*=\s*"([^"]+)"') {
            $name = $matches[1]
          } else {
            Write-Error "Package name not found in $backendToml"
            exit 1
          }
          # Extract version
          if ($tomlContent -match 'version\s*=\s*"([^"]+)"') {
            $version = $matches[1]
          } else {
            Write-Error "Version not found in $backendToml"
            exit 1
          }
          Write-Output "name=$name" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Output "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Step 5: Create Release for Application
      - name: Create Release for Application
        if: steps.app_info.outputs.version && steps.app_info.outputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ steps.app_info.outputs.version }}
          release_name: ${{ steps.app_info.outputs.product_name }} v${{ steps.app_info.outputs.version }}
          body: "Release ${{ steps.app_info.outputs.product_name }} v${{ steps.app_info.outputs.version }}"
          draft: false
          prerelease: false

      # Step 6: Upload Release Asset for Application
      - name: Upload Release Asset for Application
        if: steps.app_info.outputs.version && steps.app_info.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_app.outputs.upload_url }}
          asset_path: ./application/target/release/your_application_build.exe # Update the path to your build artifact
          asset_name: your_application_build.exe # Update the name as desired
          asset_content_type: application/octet-stream

      # Step 7: Build the Tauri Application
      - name: Build Tauri Application
        if: steps.app_info.outputs.version && steps.app_info.outputs.version != ''
        shell: pwsh
        run: |
          cd application
          cargo tauri build --release
          cd ..

      # Step 8: Create Release for Backend
      - name: Create Release for Backend
        if: steps.backend_info.outputs.version && steps.backend_info.outputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: backend-v${{ steps.backend_info.outputs.version }}
          release_name: ${{ steps.backend_info.outputs.name }} v${{ steps.backend_info.outputs.version }}
          body: "Release ${{ steps.backend_info.outputs.name }} v${{ steps.backend_info.outputs.version }}"
          draft: false
          prerelease: false

      # Step 9: Upload Release Asset for Backend
      - name: Upload Release Asset for Backend
        if: steps.backend_info.outputs.version && steps.backend_info.outputs.version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_backend.outputs.upload_url }}
          asset_path: ./backend/target/release/your_backend_build.exe # Update the path to your build artifact
          asset_name: your_backend_build.exe # Update the name as desired
          asset_content_type: application/octet-stream

      # Step 10: Build the Backend
      - name: Build Backend
        if: steps.backend_info.outputs.version && steps.backend_info.outputs.version != ''
        shell: pwsh
        run: |
          cd backend
          cargo build --release
          cd ..
